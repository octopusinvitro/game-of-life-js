{"version":3,"sources":["location.js","grid.js","starters.js","display.js","user-input.js"],"names":["Location","row","cell","_classCallCheck","this","cellCount","left","_ltBorderProtected","top","right","_rbBorderProtected","bottom","coordinate","Grid","_cellCount","_grid","_createGrid","_location","state","starter","start","Math","floor","setState","getState","alive","gridCopy","_copy","_aliveNeighboursCount","DEAD","ALIVE","Array","fill","map","source","target","grid","from","_this","setLocation","neighbours","reduce","aliveCount","neighbour","rows","Starters","locations","maxCoordinate","max","apply","_toConsumableArray","location","forEach","Object","freeze","GLIDER","createStarter","R_PENTOMINO","DIE_HARD","ACORN","Display","canvas","_screen","getContext","_screenSize","offsetWidth","_cellSize","setAttribute","_canvasStyle","addStarter","_display","applyRules","_clearScreen","_setCellColor","fillRect","clearRect","fillStyle","_randomColor","DEFAULT_CELL_COLOR","randomIndex","random","CELL_COLORS","length","concat","UserInput","ids","idsToStarters","_start","document","getElementById","_song","song","_idsToStarters","_displayStarters","_initializeButtons","_initializeStart","_this2","idToStarter","_correctedCellCount","id","_this3","addEventListener","_this4","loop","play","tick","update","setTimeout","SONG_BEAT_DURATION_IN_MILLISECONDS","MINIDISPLAY_CELL_COUNT"],"mappings":"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","file":"app.js","sourcesContent":["class Location {\n  constructor(row, cell) {\n    this.row = row;\n    this.cell = cell;\n  }\n\n  setLocation(row, cell) {\n    this.row = row;\n    this.cell = cell;\n  }\n\n  neighbours(cellCount) {\n    let\n      left = this._ltBorderProtected(this.cell, cellCount),\n      top = this._ltBorderProtected(this.row, cellCount),\n      right = this._rbBorderProtected(this.cell, cellCount),\n      bottom = this._rbBorderProtected(this.row, cellCount);\n\n    return [\n      { row: top,      cell: left }, {row: top,    cell: this.cell }, { row: top,      cell: right },\n      { row: this.row, cell: left },                                  { row: this.row, cell: right },\n      { row: bottom,   cell: left }, {row: bottom, cell: this.cell }, { row: bottom,   cell: right }\n    ];\n  }\n\n  _ltBorderProtected(coordinate, cellCount) {\n    return (cellCount + coordinate - 1) % cellCount;\n  }\n\n  _rbBorderProtected(coordinate, cellCount) {\n    return (cellCount + coordinate + 1) % cellCount;\n  }\n}\n","class Grid {\n  static DEAD = 0;\n  static ALIVE = 1;\n\n  constructor(cellCount) {\n    this._cellCount = cellCount;\n    this._grid = this._createGrid(cellCount);\n    this._location = new Location(0, 0);\n  }\n\n  get cellCount() {\n    return this._cellCount;\n  }\n\n  get grid() {\n    return this._grid;\n  }\n\n  set grid(rows) {\n    this._grid = rows;\n  }\n\n  getState(row, cell) {\n    return this._grid[row][cell];\n  }\n\n  setState(row, cell, state) {\n    this._grid[row][cell] = state;\n  }\n\n  addStarter(starter) {\n    let start = Math.floor(this.cellCount / 2 - starter.cellCount / 2);\n\n    for (let row = 0; row < starter.cellCount; row++) {\n      for (let cell = 0; cell < starter.cellCount; cell++) {\n        this.setState(row + start, cell + start, starter.getState(row, cell));\n      }\n    }\n  }\n\n  applyRules() {\n    let alive, gridCopy = new Grid(this._cellCount);\n\n    this._copy(this, gridCopy);\n\n    for (let row = 0; row < this._cellCount; row++) {\n      for (let cell = 0; cell < this._cellCount; cell++) {\n        alive = this._aliveNeighboursCount(row, cell);\n\n        if (alive < 2 || alive > 3) {\n          gridCopy.setState(row, cell, Grid.DEAD);\n        }\n\n        if (alive === 2 && this.getState(row, cell) === Grid.ALIVE ||\n            alive === 3) {\n          gridCopy.setState(row, cell, Grid.ALIVE);\n        }\n      }\n    }\n\n    this._copy(gridCopy, this);\n  }\n\n  _createGrid(cellCount) {\n    return Array(cellCount).fill().map(() => {\n      return Array(cellCount).fill(Grid.DEAD);\n    });\n  }\n\n  _copy(source, target) {\n    target.grid = source.grid.map((row) => {\n      return Array.from(row);\n    });\n  }\n\n  _aliveNeighboursCount(row, cell) {\n    this._location.setLocation(row, cell);\n\n    return this._location.neighbours(this._cellCount).reduce((aliveCount, neighbour) => {\n      return aliveCount + this.getState(neighbour.row, neighbour.cell);\n    }, 0);\n  }\n}\n","class Starters {\n  static GLIDER = this.createStarter([\n    { row: 0, cell: 2 },\n    { row: 1, cell: 0 },\n    { row: 1, cell: 2 },\n    { row: 2, cell: 1 },\n    { row: 2, cell: 2 }\n  ]);\n\n  static R_PENTOMINO = this.createStarter([\n    { row: 0, cell: 1 },\n    { row: 0, cell: 2 },\n    { row: 1, cell: 0 },\n    { row: 1, cell: 1 },\n    { row: 2, cell: 1 }\n  ]);\n\n  static DIE_HARD = this.createStarter([\n    { row: 0, cell: 6 },\n    { row: 1, cell: 0 },\n    { row: 1, cell: 1 },\n    { row: 2, cell: 1 },\n    { row: 2, cell: 5 },\n    { row: 2, cell: 6 },\n    { row: 2, cell: 7 }\n  ]);\n\n  static ACORN = this.createStarter([\n    { row: 0, cell: 1 },\n    { row: 1, cell: 3 },\n    { row: 2, cell: 0 },\n    { row: 2, cell: 1 },\n    { row: 2, cell: 4 },\n    { row: 2, cell: 5 },\n    { row: 2, cell: 6 }\n  ]);\n\n  static createStarter(locations) {\n    let maxCoordinate = Math.max(\n      Math.max(...locations.map((location) => location.row)),\n      Math.max(...locations.map((location) => location.cell))\n    );\n\n    const starter = new Grid(maxCoordinate + 1);\n\n    locations.forEach((location) => {\n      starter.setState(location.row, location.cell, Grid.ALIVE);\n    });\n\n    return Object.freeze(starter);\n  }\n}\n","class Display {\n  static DEFAULT_CELL_COLOR = 'transparent';\n  static CELL_COLORS = [\n    '#fec901', '#fc9a00', '#ff2905', '#fe5744', '#ff8970', // R\n    '#348680', '#00bd89', '#33847e', '#30606c', '#73ceaf', // G\n    '#775a79', '#fc87b1', '#47a3e2', '#a5ebe9', '#3979c0'  // B\n  ];\n\n  constructor(canvas, grid) {\n    this._screen = canvas.getContext('2d');\n    this._screenSize = canvas.offsetWidth;\n    this._cellSize = canvas.offsetWidth / grid.cellCount;\n    canvas.setAttribute('style', this._canvasStyle());\n\n    this._grid = grid;\n  }\n\n  addStarter(starter) {\n    this._grid.addStarter(starter);\n    this._display();\n  }\n\n  update() {\n    this._grid.applyRules();\n    this._clearScreen();\n    this._display();\n  }\n\n  _display() {\n    for (let row = 0; row < this._grid.cellCount; row++) {\n      for (let cell = 0; cell < this._grid.cellCount; cell++) {\n        this._setCellColor(row, cell);\n        this._screen.fillRect(cell * this._cellSize, row * this._cellSize, this._cellSize, this._cellSize);\n      }\n    }\n  }\n\n  _clearScreen() {\n    this._screen.clearRect(0, 0, this._screenSize, this._screenSize);\n  }\n\n  _setCellColor(row, cell) {\n    this._screen.fillStyle = this._grid.getState(row, cell) === Grid.ALIVE ?\n      this._randomColor() :\n      Display.DEFAULT_CELL_COLOR;\n  }\n\n  _randomColor() {\n    let randomIndex = Math.floor(Math.random() * Display.CELL_COLORS.length);\n    return Display.CELL_COLORS[randomIndex];\n  }\n\n  _canvasStyle() {\n    return `background-image:\n        linear-gradient(white 1px, transparent 1px),\n        linear-gradient(90deg, white 1px, transparent 1px),\n        linear-gradient(rgba(255,255,255,.3) 1px, transparent 1px),\n        linear-gradient(90deg, rgba(255,255,255,.3) 1px, transparent 1px);\n      background-size: ${5 * this._cellSize}px ${5 * this._cellSize}px,\n                       ${5 * this._cellSize}px ${5 * this._cellSize}px,\n                       ${this._cellSize}px ${this._cellSize}px, ${this._cellSize}px ${this._cellSize}px;\n      background-position:-1px -1px, -1px -1px, -1px -1px, -1px -1px;`;\n  }\n}\n","class UserInput {\n  static MINIDISPLAY_CELL_COUNT = 8;\n  static SONG_BEAT_DURATION_IN_MILLISECONDS = 545;\n\n  constructor(cellCount, ids, idsToStarters) {\n    this._cellCount = cellCount;\n\n    this._start = document.getElementById(ids.start);\n    this._song = document.getElementById(ids.song);\n    this._display = new Display(document.getElementById(ids.canvas), new Grid(cellCount));\n\n    this._idsToStarters = idsToStarters;\n  }\n\n  initialize() {\n    this._displayStarters();\n    this._initializeButtons();\n    this._initializeStart();\n  }\n\n  _displayStarters() {\n    this._idsToStarters.forEach((idToStarter) => {\n      let cellCount = this._correctedCellCount(idToStarter.starter.cellCount);\n      let miniDisplay = new Display(document.getElementById(idToStarter.id), new Grid(cellCount));\n      miniDisplay.addStarter(idToStarter.starter);\n    });\n  }\n\n  _initializeButtons() {\n    this._idsToStarters.forEach((idToStarter) => {\n      document.getElementById(`${idToStarter.id}-button`).addEventListener('click', () => {\n        this._display.addStarter(idToStarter.starter);\n      });\n    });\n  }\n\n  _initializeStart() {\n    this._start.addEventListener('click', () => {\n      let tick = () => {\n        this._display.update();\n        setTimeout(tick, UserInput.SONG_BEAT_DURATION_IN_MILLISECONDS);\n      };\n\n      this._song.loop = true;\n      this._song.play();\n      tick();\n    });\n  }\n\n  _correctedCellCount(cellCount) {\n    return cellCount < UserInput.MINIDISPLAY_CELL_COUNT ? UserInput.MINIDISPLAY_CELL_COUNT : cellCount;\n  }\n}\n"]}